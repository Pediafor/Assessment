// ==================================================
// Pediafor Prisma Schema (v1)
// Aligned with init.sql
// ==================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================================================
// USERS
// ==================================================
model User {
  user_id       String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username      String   @unique @db.VarChar(100)
  email         String   @unique @db.VarChar(255)
  password_hash String?  @db.Text
  roles         String[] @default("{}") @db.TextArray
  profile       Json     @default("{}")
  settings      Json     @default("{}")
  mfa_enabled   Boolean  @default(false)
  timezone      String?  @db.VarChar(64)
  data_region   String?  @db.VarChar(64)
  gdpr_consent  Boolean  @default(false)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamptz
  last_login_at DateTime? @db.Timestamptz
  updated_at    DateTime @default(now()) @db.Timestamptz

  submissions   Submission[]
  grades        Grade[]
  analytics     AnalyticsEvent[]
  userAnalytics UserAnalytics?

  @@index([roles], type: Gin)
  @@index([profile], type: Gin)
}

// ==================================================
// ASSESSMENTS
// ==================================================
model Assessment {
  assessment_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title         String   @db.VarChar(512)
  description   String?  @db.Text
  status        String   @default("draft") @db.VarChar(50)
  visibility    String   @default("private") @db.VarChar(50)
  version       Int      @default(1)
  metadata      Json     @default("{}")
  timing        Json     @default("{}")
  created_at    DateTime @default(now()) @db.Timestamptz
  updated_at    DateTime @default(now()) @db.Timestamptz

  sections      AssessmentSection[]
  submissions   Submission[]
  grades        Grade[]
  analytics     AnalyticsEvent[]
  assessmentAnalytics AssessmentAnalytics?

  @@index([metadata], type: Gin)
}

// ==================================================
// SECTIONS
// ==================================================
model AssessmentSection {
  section_id    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  assessment_id String   @db.Uuid
  title         String   @db.VarChar(255)
  description   String?  @db.Text
  type          String?  @default("fixed_set") @db.VarChar(50)
  ordering      Int?     @default(0)
  timing        Json     @default("{}")
  questions     Json     @default("[]")
  metadata      Json     @default("{}")
  created_at    DateTime @default(now()) @db.Timestamptz

  assessment    Assessment @relation(fields: [assessment_id], references: [assessment_id], onDelete: Cascade)
  questionsList Question[]

  @@index([assessment_id])
}

// ==================================================
// QUESTIONS
// ==================================================
model Question {
  question_id   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  schema_version String? @default("v1") @db.VarChar(32)
  version       Int?     @default(1)
  bank_id       String?  @db.Uuid
  section_id    String?  @db.Uuid
  type          String   @db.VarChar(50)
  difficulty    String?  @db.VarChar(32)
  tags          String[] @default("{}") @db.TextArray
  content       Json
  answer        Json     @default("{}")
  points        Int?     @default(1)
  grading       Json     @default("{}")
  metadata      Json     @default("{}")
  embedding     Bytes?   @db.Vector(1536)
  created_at    DateTime @default(now()) @db.Timestamptz
  updated_at    DateTime @default(now()) @db.Timestamptz

  section AssessmentSection? @relation(fields: [section_id], references: [section_id], onDelete: SetNull)

  @@index([tags], type: Gin)
  @@index([content], type: Gin)
}

// ==================================================
// SUBMISSIONS
// ==================================================
model Submission {
  submission_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  assessment_id String   @db.Uuid
  user_id       String   @db.Uuid
  attempt_number Int?    @default(1)
  session_id    String?  @db.Uuid
  submitted_at  DateTime @default(now()) @db.Timestamptz
  answers       Json
  metadata      Json     @default("{}")
  status        String?  @default("submitted") @db.VarChar(32)
  created_at    DateTime @default(now()) @db.Timestamptz
  updated_at    DateTime @default(now()) @db.Timestamptz

  user        User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  assessment  Assessment @relation(fields: [assessment_id], references: [assessment_id], onDelete: Cascade)
  grades      Grade[]
  analytics   AnalyticsEvent[]
  submissionAnalytics SubmissionAnalytics?

  @@index([assessment_id])
  @@index([user_id])
  @@index([metadata], type: Gin)
}

// ==================================================
// GRADES
// ==================================================
model Grade {
  grade_id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  submission_id   String   @db.Uuid
  assessment_id   String   @db.Uuid
  user_id         String   @db.Uuid
  grader_type     String?  @default("ai") @db.VarChar(32)
  rubric_version  String?  @db.VarChar(128)
  final_score     Decimal  @db.Decimal(8, 2)
  max_score       Decimal  @db.Decimal(8, 2)
  graded_at       DateTime @default(now()) @db.Timestamptz
  results         Json
  grading_details Json     @default("{}")
  metadata        Json     @default("{}")
  created_at      DateTime @default(now()) @db.Timestamptz
  updated_at      DateTime @default(now()) @db.Timestamptz

  user       User       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  assessment Assessment @relation(fields: [assessment_id], references: [assessment_id], onDelete: Cascade)
  submission Submission @relation(fields: [submission_id], references: [submission_id], onDelete: Cascade)

  @@index([assessment_id])
  @@index([user_id])
  @@index([metadata], type: Gin)
}

// ==================================================
// ANALYTICS EVENTS
// ==================================================
model AnalyticsEvent {
  event_id      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tenant_id     String?  @db.Uuid
  event_type    String   @db.VarChar(128)
  user_id       String?  @db.Uuid
  assessment_id String?  @db.Uuid
  submission_id String?  @db.Uuid
  payload       Json
  created_at    DateTime @default(now()) @db.Timestamptz

  user        User?       @relation(fields: [user_id], references: [user_id])
  assessment  Assessment? @relation(fields: [assessment_id], references: [assessment_id])
  submission  Submission? @relation(fields: [submission_id], references: [submission_id])

  @@index([event_type])
  @@index([created_at])
}

// ==================================================
// USER ANALYTICS
// ==================================================
model UserAnalytics {
  user_id                  String   @id @db.Uuid
  registered_at            DateTime? @db.Timestamptz
  last_login_at            DateTime? @db.Timestamptz
  roles                    String[] @default("{}") @db.TextArray
  institution_id           String?  @db.Uuid
  assessments_attempted    Int?     @default(0)
  assessments_passed       Int?     @default(0)
  avg_score                Decimal? @default(0) @db.Decimal(6, 2)
  avg_time_spent_seconds   Int?     @default(0)
  updated_at               DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [user_id], references: [user_id])
}

// ==================================================
// ASSESSMENT ANALYTICS
// ==================================================
model AssessmentAnalytics {
  assessment_id               String   @id @db.Uuid
  title                       String?  @db.VarChar(512)
  created_by                  String?  @db.Uuid
  scheduled_at                DateTime? @db.Timestamptz
  total_submissions           Int?     @default(0)
  avg_score                   Decimal? @default(0) @db.Decimal(6, 2)
  pass_rate_percent           Decimal? @default(0) @db.Decimal(5, 2)
  avg_completion_time_seconds Int?     @default(0)
  difficulty_index            Decimal? @default(0) @db.Decimal(5, 4)
  updated_at                  DateTime @default(now()) @db.Timestamptz

  assessment Assessment @relation(fields: [assessment_id], references: [assessment_id])
}

// ==================================================
// QUESTION ANALYTICS
// ==================================================
model QuestionAnalytics {
  question_id        String   @id @db.Uuid
  assessment_id      String?  @db.Uuid
  type               String?  @db.VarChar(50)
  total_attempts     Int?     @default(0)
  correct_attempts   Int?     @default(0)
  avg_time_spent_seconds Decimal? @default(0) @db.Decimal(8, 2)
  difficulty_index   Decimal? @default(0) @db.Decimal(5, 4)
  discrimination_index Decimal? @default(0) @db.Decimal(5, 4)
  hint_usage_rate    Decimal? @default(0) @db.Decimal(5, 4)
  updated_at         DateTime @default(now()) @db.Timestamptz
}

// ==================================================
// SUBMISSION ANALYTICS
// ==================================================
model SubmissionAnalytics {
  submission_id             String   @id @db.Uuid
  assessment_id             String?  @db.Uuid
  user_id                   String?  @db.Uuid
  submitted_at              DateTime? @db.Timestamptz
  score                     Decimal? @db.Decimal(8, 2)
  max_score                 Decimal? @db.Decimal(8, 2)
  completion_status         String?  @db.VarChar(32)
  total_time_spent_seconds  Int?
  total_answered            Int?
  correct_count             Int?
  incorrect_count           Int?
  created_at                DateTime @default(now()) @db.Timestamptz

  submission Submission? @relation(fields: [submission_id], references: [submission_id])
}

// ==================================================
// GRADE DISTRIBUTION
// ==================================================
model GradeDistribution {
  id            BigInt   @id @default(autoincrement())
  assessment_id String?  @db.Uuid
  grade_bucket  String?  @db.Text
  student_count Int?
  computed_at   DateTime @default(now()) @db.Timestamptz
}
